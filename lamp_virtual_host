#!/bin/bash
#
# NAME
# lamp_virtual_host - create or delete an apache virtual host with database mysql support, custom fast-cgi php version and ssl certificate
#
#
# INSTALLATION
#	sudo mv lamp_virtual_host /usr/bin
#	sudo chmod +x /usr/bin/lamp_virtual_host
#
# REQUIREMENTS
#	- A debian linux distribution like Ubuntu or Debian
#	- Stack Lamp: Apache, Mysql (optional), Php
#	- php-fpm module (optional)
#	- mkcert or certbot for ssl certificate (optional)
#	- wget, tar, unzip and composer for application installation (optional)
#
# AUTHOR:
#	lamp_virtual_host is written by Alfio Salanitri <www.alfiosalanitri.it> and are licensed under MIT License.
#
#
#############################################################
# Icons	and color
# https://www.techpaste.com/2012/11/print-colored-text-background-shell-script-linux/
# https://apps.timwhitlock.info/emoji/tables/unicode
#############################################################
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[1;33m'
nocolor='\033[0m'
icon_ok='\xE2\x9C\x94'
icon_ko='\xe2\x9c\x97'
icon_wait='\xE2\x8C\x9B'
icon_rocket='\xF0\x9F\x9A\x80'
#############################################################
# Help
#############################################################
display_help() {
cat << EOF
Copyright (C) 2022 by Alfio Salanitri
Website: https://github.com/alfiosalanitri/lamp-virtual-host

Usage: $(basename $0) -a www.example.com,shop.example.com -d public /path/to/www.example.com

Options
-a
  One or more aliases (optional)
-d
  Custom directory with public files (optional) (default public_html)
-h
  show this help
    
EOF
} 
#############################################################
# Functions
#############################################################
get_user_ini() {
cat << EOF
max_execution_time=3000
upload_max_filesize=150M
max_input_time=3000
post_max_size=256M
memory_limit=256M
max_input_vars=5000
EOF
}
check_required_package() {
  #check if given package is installed 
  if ! command -v $1 &> /dev/null; then
   	printf "[${red}${icon_ko}${nocolor}] Sorry, but ${green}${1}${nocolor} is required. Install it with apt install $1.\n"
   	exit 1;
  fi
}
create_fastcgi_pool () {
  #copy the www.conf pool file and change [www] and listen address
  fcgi_php_v=$1
  fcgi_pool_name=$2
  fcgi_config_file=/etc/php/$fcgi_php_v/fpm/pool.d/$fcgi_pool_name.conf
  if [ ! -f "/etc/php/$fcgi_php_v/fpm/pool.d/www.conf" ]; then
    printf "[${red}${icon_ko}${nocolor}] Sorry, but ${green}/etc/php/$fcgi_php_v/fpm/pool.d/www.conf${nocolor} config file doesn't exists.\n"
   	exit 1;
  fi
	sudo cp /etc/php/$fcgi_php_v/fpm/pool.d/www.conf $fcgi_config_file
	sudo sed -i "s/\[www\]/\[$fcgi_pool_name\]/g" $fcgi_config_file
	pool_address_from="listen = $(sudo awk -F'= ' '/^listen = / { print $2}' $fcgi_config_file)"
	pool_address_to=$(sudo echo $pool_address_from | sed -e "s/-fpm.sock/-$fcgi_pool_name-fpm.sock/g")
	sudo sed -i "s|$pool_address_from|$pool_address_to|" $fcgi_config_file
	#reload service
	sudo systemctl restart php${fcgi_php_v}-fpm.service
}
#############################################################
# Check Dependencies
#############################################################
# Check Apache
if [ ! -d /etc/apache2 ]; then
  printf "[${red}${icon_ko}${nocolor}] Sorry, but ${green}/etc/apache2${nocolor} is required.\n"
  exit 1
fi
# Check php
if [ -z "$(ls -A "/etc/php")" ]; then
  printf "[${red}${icon_ko}${nocolor}] Sorry, but ${green}/etc/php${nocolor} is required.\n"
  exit 1
fi

#############################################################
# Get options
#############################################################
while getopts 'ha:d:' option; do
	case "${option}"
		in
		h)
			display_help
			exit 1
			;;			
		a)
  		server_alias_with_comma=$OPTARG
			#replace comma with space
			server_alias_with_space="$(echo $OPTARG | sed -e 's/,/ /gm;t;d')"
			;;
		d)
			custom_public_dir=$OPTARG
			;;
		?)
			display_help
			exit 1
			;;
	esac
done
shift "$(($OPTIND -1))"


#check if the last args is a valid directory
if [ ! -d "$*" ]; then
  printf "[${red}${icon_ko}${nocolor}] Type the directory that include your website (with final slash). ${red}N.B.${nocolor} rename the directory with website domain. Example: www.example.com\n"
  exit 1
fi

#domain name that is used for virtual host
domain=$(basename "$*")

#this is the string used in /etc/hosts file (127.0.0.1   example.com)
hosts_domain=$domain
#if there is one or more aliases, add this to hosts_domain list
if [ -n "$server_alias_with_space" ]; then
	hosts_domain="$domain $server_alias_with_space"
fi

#this is the website url
website_url="http://$domain/"

#this is the domain alias space separated to add to virtual host file
server_alias=$server_alias_with_space

#certbot config domains
certbot_domains=$domain
#if there is one or more aliases, add to certbot domain comma separated
if [ -n "$server_alias_with_comma" ]; then
	certbot_domains="${domain},${server_alias_with_comma}"
fi

#full path of website
path="$(pwd)/${domain}/"

#default file directory
public_dir="public_html"
#if user type custom public directory, use this.
if [ -n "$custom_public_dir" ]; then
	public_dir=${custom_public_dir%/}
fi

#environment type
environment_type=""

#action type
action_type=""

#php fastcgi
fastcgi=""
fastcgi_ssl=""
fastcgi_pool_name=$(echo $domain | sed -E 's/\.//gm;t;d')

#############################################################
# User choises
#############################################################
echo ""
echo "***************************"
echo "* 1. ENVIRONMENT TYPE"
echo "***************************"
echo ""
sudo printf "${yellow}${icon_wait}${nocolor} Choose the environment type for ${green}$domain${nocolor}\n"
echo ""
PS3="Type 1 or 2: "
actions=("development" "production")
select action in "${actions[@]}"; do
  case $action in
  "development")
    printf "[${green}${icon_ok}${nocolor}] Good, I will create the ssl certificate with mkcert for local use only.\n"
    environment_type=$action
    break
    ;;
  "production")
    printf "[${green}${icon_ok}${nocolor}] Make sure you have added the domain dns that point to this server for activate the let's encrypt certificate.\n"
    environment_type=$action
    break
    ;;
  *) printf "[${red}${icon_ko}${nocolor}] $REPLY isn't a valid option. Try again\n" ;;
  esac
done

# create/delete domain
echo ""
echo "***************************"
echo "* 2. VIRTUAL HOST"
echo "***************************"
echo ""
printf "${yellow}${icon_wait}${nocolor} Do you want to CREATE or DELETE the virtual host ${green}$domain${nocolor}?\n"
echo ""
PS3="Type 1 or 2: "
actions=("create" "delete")
select action in "${actions[@]}"; do
  case $action in
  "create")
    #check if exists the virtual host
    if [ -d /var/www/"$domain" ]; then
      printf "[${red}${icon_ko}${nocolor}] Sorry, but this virtual host already exists.\n"
      exit 1
    fi
    action_type=$action
    break
    ;;
  "delete")
    action_type=$action
    break
    ;;
  *) printf "[${red}${icon_ko}${nocolor}] $REPLY isn't a valid option. Try again\n" ;;
  esac
done
printf "[${green}${icon_ok}${nocolor}] Good, I will to ${green}$action_type${nocolor} the virtual host. Now...\n"

# create/delete database
echo "***************************"
echo "* 3. DATABASE"
echo "***************************"
echo ""
printf "${yellow}${icon_wait}${nocolor} Do you want to ${green}$action_type${nocolor} the database?\n"
echo ""
PS3="Type 1 or 2: "
actions=("Yes" "No")
select action in "${actions[@]}"; do
  case $action in
  "Yes")
    # Check if exists
    check_required_package mysql

    #ok mysql is installed
    read -p "Type the database name: " database_name
    database_name=${database_name}

    read -p "Type the super admin username: " database_user
    database_user=${database_user}

    read -sp "Type the super admin password: " database_password
    database_password=${database_password}

    sql="create database if not exists $database_name;"
    if [ "$action_type" == "delete" ]; then
      sql="drop database $database_name;"
    fi

    printf "\nMysql log start: ----------------------------------------------------------------\n"
    #create/delete the database
    if ! mysql -u$database_user -p$database_password -e "$sql"; then
      printf "Mysql log end: ----------------------------------------------------------\n"
      printf "[${red}${icon_ko}${nocolor}] Database errors. Solve this log errors messages.\n"
      exit 1
    fi

    #check if the database exists
    database_check=$(mysql -u$database_user -p$database_password -e "SHOW DATABASES" | grep -Fo $database_name)
    printf "Mysql log end: ------------------------------------------------------------------\n"
    if [ "$action_type" == "delete" ]; then
      if [ "$database_check" != "$database_name" ]; then
        printf "[${green}${icon_ok}${nocolor}] Good, database deleted with success. Now...\n"
      else
        printf "[${red}${icon_ko}${nocolor}] Error, database not deleted. Now...\n"
      fi
    else
      if [ "$database_check" == "$database_name" ]; then
        printf "[${green}${icon_ok}${nocolor}] Good, database created with success. Now...\n"
      else
        printf "[${red}${icon_ko}${nocolor}] Error, database not created. Now...\n"
      fi
    fi

		#create/delete database user
		echo ""
		printf "${yellow}${icon_wait}${nocolor} Do you want to ${green}$action_type${nocolor} an user for database: ${yellow}$database_name${nocolor}?\n"
		echo ""
		PS3="Type 1 or 2: "
		actions=("Yes" "No")
		select action in "${actions[@]}"; do
  		case $action in
  			"Yes")

    			read -p "Type a name for the user: " database_user_name
    			database_user_name=${database_user_name}

    			if [ "$action_type" == "delete" ]; then
      			sql="drop user '$database_user_name'@'localhost';"
    			else
						read -sp "Type a strong password for this user: " database_user_password
    				database_user_password=${database_user_password}
    				sql="create user '$database_user_name'@'localhost' identified with mysql_native_password by '$database_user_password';"
					fi

    			printf "\nMysql log start: ----------------------------------------------------------------\n"
    			#create/delete the user
   				if ! mysql -u$database_user -p$database_password -e "$sql"; then
      			printf "Mysql log end: ----------------------------------------------------------\n"
      			printf "[${red}${icon_ko}${nocolor}] Database user errors. Solve this log errors messages.\n"
      			exit 1
    			fi

    			#check if the user exists
    			database_user_check=$(mysql -u$database_user -p$database_password -e "select user from mysql.user;" | grep -Fo $database_user_name)
    			printf "Mysql log end: ------------------------------------------------------------------\n"
    			if [ "$action_type" == "delete" ]; then
      			if [ "$database_user_check" != "$database_user_name" ]; then
        			printf "[${green}${icon_ok}${nocolor}] Good, database user deleted with success. Now...\n"
      			else
        			printf "[${red}${icon_ko}${nocolor}] Error, database user not deleted. Now...\n"
      			fi
    			else
      			if [ "$database_user_check" == "$database_user_name" ]; then
        			printf "[${green}${icon_ok}${nocolor}] Good, database user created with success. Now...\n"
							#grant the privileges to database
							printf "\nMysql log start: ----------------------------------------------------------------\n"
							if ! mysql -u$database_user -p$database_password -e "Grant all privileges on $database_name.* to '$database_user_name'@'localhost';"; then
								printf "\nMysql log end: ----------------------------------------------------------------\n"
								printf "[${red}${icon_ko}${nocolor}] Failed granting privileges."
								exit 1
							fi
							printf "\nMysql log end: ----------------------------------------------------------------\n"
							#flush privileges
							mysql -u$database_user -p$database_password -e "flush privileges;"
      				printf "[${green}${icon_ok}${nocolor}] Privileges granted. Now...\n"
						else
        			printf "[${red}${icon_ko}${nocolor}] Error, database user not created. Now...\n"
      			fi
    			fi
    			break
    			;;
  			"No")
    			break
    			;;
  			*) printf "[${red}${icon_ko}${nocolor}] $REPLY isn't a valid option. Try again\n" ;;
  		esac
		done
    break
    ;;
  "No")
    break
    ;;
  *) printf "[${red}${icon_ko}${nocolor}] $REPLY isn't a valid option. Try again\n" ;;
  esac
done

#########################################################
# Delete the virtual host
#########################################################
if [ "$action_type" = "delete" ]; then

  printf "\n${yellow}${icon_wait}${nocolor} Deleting virtual host...\n"

  #check if exists the virtual host
  if [ ! -d /var/www/"$domain" ]; then
    printf "[${red}${icon_ko}${nocolor}] Sorry, but this virtual host doesn't exists.\n"
    exit 1
  fi

  #delete the www directory
  sudo rm -r /var/www/$domain > /dev/null 2>&1
  printf "[${green}${icon_ok}${nocolor}] Symbolic link deleted from /var/www\n"

	#delete mkcert certificates
	if [ "development" == "$environment_type" ]; then
		cd $path
		rm ${domain}*.pem
		printf "[${green}${icon_ok}${nocolor}] mkcert certificates deleted.\n"
	fi
	
	#delete the fpm pool config file if exists
	fpm_php_version=$(sudo awk '/proxy:unix:/ { print $2}' /etc/apache2/sites-enabled/$domain.conf | grep -o '[0-9].[0-9]\+' | tail -n 1)
	if [ -f "/etc/php/$fpm_php_version/fpm/pool.d/$fastcgi_pool_name.conf" ]; then
		sudo rm /etc/php/$fpm_php_version/fpm/pool.d/$fastcgi_pool_name.conf
		printf "[${green}${icon_ok}${nocolor}] FastCGI pool config file deleted\n"
		sudo systemctl restart php${fpm_php_version}-fpm.service > /dev/null 2>&1
  	printf "[${green}${icon_ok}${nocolor}] php${fpm_php_version}-fpm.service reloaded!\n"
	fi 

  #disable the apache site
  sudo rm /etc/apache2/sites-available/$domain.conf
  sudo rm /etc/apache2/sites-enabled/$domain.conf
  printf "[${green}${icon_ok}${nocolor}] Apache conf files deleted\n"

  #restart apache
  sudo service apache2 restart > /dev/null 2>&1
  printf "[${green}${icon_ok}${nocolor}] Apache reloaded!\n"

  #clear the hosts file
  sudo sed -i "/$hosts_domain/d" /etc/hosts
  printf "[${green}${icon_ok}${nocolor}] website deleted from /etc/hosts!\n\n\n"

  #if exists fail2ban reload
  if command -v fail2ban-client &>/dev/null; then
    sudo fail2ban-client restart
    sudo systemctl restart fail2ban.service
    printf "[${green}${icon_ok}${nocolor}] fail2ban restarted!\n\n\n"
  fi

  #print the final message
  printf "[${green}${icon_rocket}${nocolor}] You have controlled your fear. Now, release your anger. Only your hatred can destroy me. Virtual host destroyed!\n"

  exit 1
fi

#################################################
# Create the virtual host			#
#################################################
echo "***************************"
echo "* 4. PHP-FPM"
echo "***************************"
echo ""
PS3="Do you want to use PHP-FPM (FastCGI Process Manager)?: "
actions=("Yes" "No")
select action in "${actions[@]}"; do
  case $action in
  "Yes")
    printf "${yellow}${icon_wait}${nocolor} Choose the php-fpm version to use:\n"
    echo ""
    #choose the php-fpm versions
    PS3='Type the choice number: '
    # get all php-fpm installed
    php_versions=($(dpkg --get-selections | grep -ohE "php*.*-fpm" | grep -oe '\([0-9.]*\)'))
    if [ ${#php_versions[@]} -eq 0 ]; then
      printf "[${red}${icon_ko}${nocolor}] Sorry, but php-fpm is required. Install it with ${green}sudo apt install php${nocolor}x.x${green}-fpm\n"
      exit 1
    fi
    # current php -v
    php_current_version=($(php -v | grep PHP | awk '{print $2}' | head -1 | grep -oE "[0-9]+[.][0-9]"))

    # user selected version
    select php_version in "${php_versions[@]}"; do
      if ! [ "$REPLY" -eq "$REPLY" ] 2>/dev/null; then
        printf "[${red}${icon_ko}${nocolor}] $REPLY must be an integear. Try again\n"
        exit 1
      fi
      if [ $REPLY -eq 0 ] || [ $REPLY -gt ${#php_versions[@]} ]; then
        printf "[${red}${icon_ko}${nocolor}] $REPLY isn't a valid option. Try again\n"
        exit 1
      fi
      
      #check if exists fast cgi module for debian or ubuntu
      if [ -n "$(sudo ls /etc/apache2/mods-enabled/ | grep fcgid.conf)" ]; then
        #config for apache fcgid module (in debian)
        fastcgi=$(cat <<EOF
  <FilesMatch \.php$>
    SetHandler "proxy:unix:/run/php/php${php_version}-${fastcgi_pool_name}-fpm.sock|fcgi://localhost"
  </FilesMatch>
EOF
)
        fastcgi_ssl=$fastcgi
        
        #create the fpm pool config file for this website
        create_fastcgi_pool $php_version $fastcgi_pool_name
        
      elif [ -n "$(sudo ls /etc/apache2/mods-enabled/ | grep fastcgi.conf)" ]; then
        #config for fastcgi (in ubuntu)
        fastcgi=$(cat <<EOF
  <IfModule mod_fastcgi.c>
    <FilesMatch ".+\.ph(p[345]?|t|tml)$">
      SetHandler php${php_version//./}-fcgi-www
    </FilesMatch>
  </IfModule> 
EOF
)
        fastcgi_ssl=$(cat <<EOF
  <FilesMatch "\.(cgi|shtml|phtml|php)$">
    SSLOptions +StdEnvVars
  </FilesMatch>
  
  <Directory /usr/lib/cgi-bin>
    SSLOptions +StdEnvVars
  </Directory>

  $fastcgi
EOF
)
      else
        printf "[${red}${icon_ko}${nocolor}] Sorry, but the fastcgi module is required. Install it before.\n"
        exit 1
      fi
      break
    done
    printf "[${green}${icon_ok}${nocolor}] Good, PHP-FPM will be used.\n"
    break
    ;;
  "No")
    printf "[${green}${icon_ok}${nocolor}] Good, PHP-FPM will not be used.\n"
    break
    ;;
  *) printf "${red}${icon_ko}${nocolor} $REPLY isn't a valid option. Try again\n" ;;
  esac
done

#check if directory exists
if [ ! -d "$path" ]; then
  printf "[${red}${icon_ko}${nocolor}] the $path directory doesn't exists!\n"
  exit 1
fi

#go into directory
cd $path

#check the log directory and create if not exists
if [ ! -d "$path"log ]; then
  mkdir "$path"log
  printf "[${green}${icon_ok}${nocolor}] Log directory created.\n"
fi

# check the public_dir and create if not exists
if [ ! -d "${path}${public_dir}" ]; then
  mkdir -p "${path}${public_dir}"
  printf "[${green}${icon_ok}${nocolor}] $public_dir directory created.\n"
fi

#############################################################
# INSTALL APPLICATION
#############################################################
echo ""
echo "*************************"
echo "* 5. INSTALL APPLICATION"
echo "*************************"
echo ""
sudo printf "${yellow}${icon_wait}${nocolor} Do you want to install an Application?\n"
echo ""
ssl_support=''
PS3="Type the number with your choise: "
actions=("Wordpress" "Prestashop" "Laravel" "No")
select action in "${actions[@]}"; do
  case $action in
  "Wordpress")
    
    check_required_package wget
    check_required_package tar

		#download wordpress
		wordpress_archive="latest-it_IT.tar.gz"
		wordpress_url="https://it.wordpress.org/$wordpress_archive"
		printf "[${yellow}${icon_wait}${nocolor}] Fetching Wordpress...\n"
		wget -O "$wordpress_archive" "$wordpress_url" > /dev/null 2>&1
  	printf "[${green}${icon_ok}${nocolor}] Wordpress downloaded. Extracting tar archive...\n"
		tar xf $wordpress_archive
		rm $wordpress_archive
		mv wordpress/* $public_dir
		rm -r wordpress
		get_user_ini > $public_dir/.user.ini	
		printf "[${green}${icon_ok}${nocolor}] Wordpress ready to install!\n"
    break
    ;;
  "Prestashop")
    
    check_required_package wget
    check_required_package unzip

    latest_prestashop_v=$(wget -q -O - "https://api.github.com/repos/prestashop/prestashop/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    
    #choose between production or development prestashop version
    printf "${yellow}${icon_wait}${nocolor} Which Prestashop version do you want?\n"
    PS3="Type the number with your choise: "
    prestashop_versions=("Development" "Production")
    select prestashop_version in "${prestashop_versions[@]}"; do
      case $prestashop_version in
        "Development")
          prestashop_archive="${latest_prestashop_v}.zip"
          prestashop_url="https://github.com/PrestaShop/PrestaShop/archive/refs/tags/$prestashop_archive"
          break
          ;;
        "Production")
          prestashop_archive="prestashop_${latest_prestashop_v}.zip"
          prestashop_url="https://download.prestashop.com/download/releases/$prestashop_archive"
          break
          ;;
        *) printf "[${red}${icon_ko}${nocolor}] $REPLY isn't a valid option. Try again\n" ;;
      esac
    done
    printf "[${yellow}${icon_wait}${nocolor}] Fetching Prestashop...\n"
    wget -O "$prestashop_archive" "$prestashop_url" > /dev/null 2>&1
  	printf "[${green}${icon_ok}${nocolor}] Prestashop downloaded. Extracting zip archive...\n"
		unzip $prestashop_archive -d $public_dir > /dev/null 2>&1
    rm $prestashop_archive
    #the development archive include main directory PrestaShop-xxx, unzip extraction leave this dir inside public_dir
    #fix this problem moving main directory to path, remove old public_dir and rename Prestashop-xxx to public_dir
    if [ "${latest_prestashop_v}.zip" == "$prestashop_archive" ]; then
     mv "${public_dir}/PrestaShop-${latest_prestashop_v}" $path
     rm -r $public_dir
     mv "${path}PrestaShop-${latest_prestashop_v}" "${path}$public_dir"
    fi
		get_user_ini > $public_dir/.user.ini	
		sudo chmod -R ug+w $public_dir
    printf "[${green}${icon_ok}${nocolor}] Prestashop ready to install!\n"
    break
    ;;
	"Laravel")
		
    check_required_package composer
		
    #create laravel
		printf "[${yellow}${icon_wait}${nocolor}] Installing Laravel...\n"
		composer create-project laravel/laravel webapp > /dev/null 2>&1
		#remove public_dir and change to laravel public
		rm -r $public_dir
		public_dir="webapp/public"
		get_user_ini > ${path}${public_dir}/.user.ini
		#set correct permissions
		sudo chown -R $USER:www-data "${path}webapp"
		sudo chmod -R ug+w "${path}webapp/storage"
		printf "[${green}${icon_ok}${nocolor}] Laravel installed!\n"
				
		break
		;;
  "No")
    break
    ;;
  *) printf "[${red}${icon_ko}${nocolor}] $REPLY isn't a valid option. Try again\n" ;;
  esac
done

# check if there is files inside website directory
if [ -z "$(ls -A "${path}${public_dir}")" ]; then
  #create an index file
  echo "<?php phpinfo();" >> "${path}${public_dir}/index.php"
					get_user_ini > ${path}${public_dir}/.user.ini
fi

#############################################################
# SSL certificate
#############################################################
echo ""
echo "*************************"
echo "* 6. SSL CERTIFICATE"
echo "*************************"
echo ""
sudo printf "${yellow}${icon_wait}${nocolor} Do you want to add an SSL Certificate to ${green}$domain${nocolor}?\n"
echo ""
ssl_support=''
PS3="Type 1 or 2: "
actions=("yes" "no")
select action in "${actions[@]}"; do
  case $action in
  "yes")
    # Check package dependencies
    cert_package="mkcert"
    if [ "production" == "$environment_type" ]; then
      cert_package="certbot"
    fi

    check_required_package $cert_package

    # check if ssl mod is enabled
    if [ ! -f "/etc/apache2/mods-enabled/ssl.load" ]; then
      printf "[${red}${icon_ko}${nocolor}] Enable SSL on Apache2 with ${green}sudo a2enmod ssl\n"
      exit 1
    fi

    #create the ssl certificate
    if [ "development" == "$environment_type" ]; then
      mkcert $hosts_domain >/dev/null 2>&1
			
			#check the .pem filenames (sometimes mkcert create file with ...+1.pem
			certificate_file=$(basename $(find $path -name "${domain}*.pem" -not -name "${domain}*-key.pem"))
			certificate_keyfile=$(basename $(find $path -name "${domain}*-key.pem"))
			
			ssl_support=$(cat <<EOF
<IfModule mod_ssl.c>
  <VirtualHost _default_:443>
    ServerName $domain
    ServerAlias $server_alias
    DocumentRoot /var/www/$domain/$public_dir
    ErrorLog /var/www/$domain/log/error.log
    CustomLog /var/www/$domain/log/access.log combined
    
    SSLEngine on
    SSLCertificateFile /var/www/$domain/$certificate_file
    SSLCertificateKeyFile /var/www/$domain/$certificate_keyfile

$fastcgi_ssl
  </VirtualHost>
</IfModule>
EOF
)
    else
      sudo certbot certonly --cert-name $domain -d $certbot_domains --pre-hook "systemctl stop apache2.service" --post-hook "systemctl start apache2.service"
      ssl_support=$(cat <<EOF
<IfModule mod_ssl.c>
  <VirtualHost _default_:443>
    ServerName $domain
    ServerAlias $server_alias
    DocumentRoot /var/www/$domain/$public_dir
    ErrorLog /var/www/$domain/log/error.log
    CustomLog /var/www/$domain/log/access.log combined

    SSLEngine on
    SSLCertificateFile /etc/letsencrypt/live/$domain/fullchain.pem
    SSLCertificateKeyFile /etc/letsencrypt/live/$domain/privkey.pem

$fastcgi_ssl
  </VirtualHost>
</IfModule>
EOF
)
    fi
    printf "[${green}${icon_ok}${nocolor}] SSL Certificate created with success!\n"
    website_url="https://$domain/"
    break
    ;;
  "no")
    break
    ;;
  *) printf "[${red}${icon_ko}${nocolor}] $REPLY isn't a valid option. Try again\n" ;;
  esac
done

#set the directory permissions
sudo chown -R www-data:www-data ${path}${public_dir}
sudo chmod -R g+w ${path}${public_dir}
printf "[${green}${icon_ok}${nocolor}] Permissions setted to public directory!\n"

#create the symbolic link to www
sudo ln -s $(readlink -f "$path") /var/www/$domain
printf "[${green}${icon_ok}${nocolor}] Symbolic link created into /var/www\n"

#create the apache config file
sudo touch /etc/apache2/sites-available/$domain.conf
printf "[${green}${icon_ok}${nocolor}] Apache config file created with success!\n"

#create the virtual host apache file
redirect_to_https=""
if [ -n "$ssl_support" ]; then
	redirect_to_https="Redirect / $website_url"
fi
sudo sh -c "echo '$(cat <<EOF
<VirtualHost *:80>
  ServerName $domain
  ServerAlias $server_alias
  SetEnv PATH "/var/www/$domain/$public_dir"
  DocumentRoot /var/www/$domain/$public_dir
  ErrorLog /var/www/$domain/log/error.log
  CustomLog /var/www/$domain/log/access.log combined
  
  $redirect_to_https

$fastcgi
</VirtualHost>
$ssl_support
EOF
)' >> /etc/apache2/sites-available/$domain.conf"
printf "[${green}${icon_ok}${nocolor}] Virtual host created! For extra options, edit this file: /etc/apache2/sites-enabled/$domain.conf\n"

#Enable the site
sudo a2ensite $domain.conf > /dev/null 2>&1

#restart apache
sudo service apache2 restart > /dev/null 2>&1
printf "[${green}${icon_ok}${nocolor}] Apache reloaded!\n"

#if exists fail2ban reload
if command -v fail2ban-client &>/dev/null; then
  sudo fail2ban-client restart
  sudo systemctl restart fail2ban.service
  printf "[${green}${icon_ok}${nocolor}] fail2ban restarted!\n\n\n"
fi

#Add the domain to hosts
sudo sh -c "echo '127.0.0.1	$hosts_domain' >> /etc/hosts"
printf "[${green}${icon_ok}${nocolor}] Website added to /etc/hosts!\n\n\n"

#print the final message
printf "[${green}${icon_rocket}${nocolor}] The Force will be with you. Always. Virtual host created. Go to $website_url\n"

exit 0
